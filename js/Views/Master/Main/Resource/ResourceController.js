import BaseController from '../../../../Controllers/BaseController';
import Events from '../../../../Shared/Events';
import LayoutViewResource from './LayoutViewResource';
import ViewResource from './Individual/ViewResource';
import ViewResourceList from './List/ViewResourceList';

/**
 * Controller for Resource views.
 */
class ResourceController extends BaseController
{
///////////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS
///////////////////////////////////////////////////////////////////////////////////////
    /**
     * Initialize Radio.
     */
    _initializeRadio()
    {
        // Commands.
        this._rodanChannel.comply(Events.COMMAND__RESOURCE_ADD, aOptions => this._handleCommandResourceAdd(aOptions));
        this._rodanChannel.comply(Events.COMMAND__RESOURCE_DELETE, aOptions => this._handleCommandResourceDelete(aOptions));
        this._rodanChannel.comply(Events.COMMAND__RESOURCE_SAVE, aOptions => this._handleCommandResourceSave(aOptions));

        // Requests.
        this._rodanChannel.on(Events.EVENT__RESOURCES_SELECTED, aOptions => this._handleEventListSelected(aOptions));
        this._rodanChannel.on(Events.EVENT__RESOURCE_SELECTED, aOptions => this._handleEventItemSelected(aOptions));
   }

///////////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS - Command handlers
///////////////////////////////////////////////////////////////////////////////////////
    /**
     * Handle command add Resource.
     */
    _handleCommandResourceAdd(aOptions)
    {
        var collection = this._rodanChannel.request(Events.REQUEST__RESOURCE_COLLECTION);
        collection.create({project: aOptions.project.get('url'), file: aOptions.file}, {success: () => this._handleCallbackAddSuccess()});
    }

    /**
     * Handle command Delete Resource.
     */
    _handleCommandResourceDelete(aOptions)
    {
        if (aOptions.resource.get('origin') !== null)
        {
            alert('Resources generated by Rodan cannot be deleted.'); 
        }
        else
        {
            var confirmation = confirm('Are you sure you want to delete this Resource?');
            if (confirmation)
            {
                try
                {
                    aOptions.resource.destroy({success: () => this._handleCallbackDeleteSuccess()});
                }
                catch (aError)
                {
                    console.log('TODO - not sure why this error is happening; see https://github.com/ELVIS-Project/vis-client/issues/5');
                }
            }
        }
    }

    /**
     * Handle command save Resource.
     */
    _handleCommandResourceSave(aOptions)
    {
        aOptions.resource.save({resource_type: aOptions.resource_type,
                                name: aOptions.name,
                                description: aOptions.description},
                               {patch: true, success: () => this._handleCallbackAddSuccess()});
    }

///////////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS - Event handlers
///////////////////////////////////////////////////////////////////////////////////////
    /**
     * Handle list selection.
     */
    _handleEventListSelected(aOptions)
    {
        this._layoutView = new LayoutViewResource({project: aOptions.project});
        this._rodanChannel.command(Events.COMMAND__LAYOUTVIEW_SHOW, this._layoutView);
        this._layoutView.showList(new ViewResourceList({project: aOptions.project}));
    }

    /**
     * Handle item selection.
     */
    _handleEventItemSelected(aOptions)
    {
        this._layoutView.showItem(new ViewResource(aOptions));
    }

///////////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS - Callback handlers
///////////////////////////////////////////////////////////////////////////////////////
    /**
     * Handle delete success.
     */
    _handleCallbackDeleteSuccess()
    {
        var project = this._rodanChannel.request(Events.REQUEST__PROJECT_ACTIVE);
        this._rodanChannel.trigger(Events.EVENT__RESOURCES_SELECTED, {project: project});
    }

    /**
     * Handle add success.
     */
    _handleCallbackAddSuccess()
    {
        var project = this._rodanChannel.request(Events.REQUEST__PROJECT_ACTIVE);
        this._rodanChannel.command(Events.COMMAND__RESOURCES_LOAD, {project: project.id});
    }
}

export default ResourceController;