import Events from '../../../../Shared/Events';
import LayoutViewResource from './LayoutViewResource';
import ViewResource from './Individual/ViewResource';
import ViewResourceList from './List/ViewResourceList';
import BaseController from '../../../../Controllers/BaseController';

/**
 * Controller for Resource views.
 */
class ResourceController extends BaseController
{
///////////////////////////////////////////////////////////////////////////////////////
// PUBLIC METHODS
///////////////////////////////////////////////////////////////////////////////////////
    /**
     * Basic constructor.
     */
    constructor(aOptions)
    {
        super(aOptions);
    }

///////////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS
///////////////////////////////////////////////////////////////////////////////////////
    /**
     * Initialize Radio.
     */
    _initializeRadio()
    {
        this._rodanChannel.on(Events.EVENT__RESOURCES_SELECTED, aPass => this._handleEventListSelected(aPass));
        this._rodanChannel.on(Events.EVENT__RESOURCE_SELECTED, aPass => this._handleEventItemSelected(aPass));
        this._rodanChannel.comply(Events.COMMAND__RESOURCE_DELETE, aReturn => this._handleCommandResourceDelete(aReturn));
   }

    /**
     * Handle list selection.
     */
    _handleEventListSelected(aPass)
    {
        this._layoutView = new LayoutViewResource();
        this._rodanChannel.command(Events.COMMAND__LAYOUTVIEW_SHOW, this._layoutView);
        this._viewList = new ViewResourceList({project: aPass.project});
        this._layoutView.showList(this._viewList);
    }

    /**
     * Handle item selection.
     */
    _handleEventItemSelected(aPass)
    {
        this._viewItem = new ViewResource(aPass);
        this._layoutView.showItem(this._viewItem);
    }

    /**
     * Delete resource.
     */
    _handleCommandResourceDelete(aReturn)
    {
        if (aReturn.resource.get('origin') !== null)
        {
            alert('Resources generated by Rodan cannot be deleted.'); 
        }
        else
        {
            var confirmation = confirm('Are you sure you want to delete this Resource?');
            if (confirmation)
            {
                try
                {
                    aReturn.resource.destroy({success: () => this._handleCallbackDeleteSuccess(),
                                              error: () => this._handleCallbackDeleteError()});
                }
                catch (aError)
                {
                    console.log('TODO - not sure why this error is happening; see https://github.com/ELVIS-Project/vis-client/issues/5');
                }
            }
        }
    }

    /**
     * Handle delete success.
     */
    _handleCallbackDeleteSuccess()
    {
        var project = this._rodanChannel.request(Events.REQUEST__PROJECT_ACTIVE);
        this._rodanChannel.trigger(Events.EVENT__RESOURCES_SELECTED, {project: project});
    }

    /**
     * Handle delete success.
     */
    _handleCallbackDeleteError()
    {
        alert('todo - error (need a global handler for errors)');
    }
}

export default ResourceController;